MAIN STEPS

Step 1: Setup the project structure
Step 2: Write the logic to get the computer choice
Step 3: Write the logic to get the human choice
Step 4: Declare the players score variables
Step 5: Write the logic to play a single round
Step 6: Write the logic to play the entire game


PLANNING

# Step 1: Setup the project structure


# Step 2: Write the logic to get the computer choice

// Subtasks

Create a new function named getComputerChoice

    Hint: The Math.random method returns a random number 
    that’s greater than or equal to 0 and less than 1. 
    Think about how you can use this to conditionally return one of the multiple choices.

Write the code so that getComputerChoice will randomly return one of 
the following string values: “rock”, “paper” or “scissors”.

// Pseudocode

CREATE function getComputerChoice()

CREATE randomInt to store random integer 

IF randomInt equals to 0:
    RETURN "rock"
ELSE IF randomInt equals to 1:
    RETURN "paper"
ELSE:
    RETURN "scissors"

CHECK RETURN value on console


# Step 3: Write the logic to get the human choice

// Subtasks

Create a new function named getHumanChoice

Write the code so that getHumanChoice will return one of 
the valid choices depending on what the user inputs.

    Hint: Use the prompt method to get the user’s input.
    You do not need to handle reprompting if the user 
    enters an invalid input, as that would require 
    things we will teach later. For now, just assume 
    the user will always enter a valid choice.

// Pseudocode

CREATE function getHumanChoice

CREATE variable userInput to store user’s input
PROMPT the user for input AND store it in userInput

RETURN userInput 

CHECK RETURN value on console 
 

# Step 4: Declare the players score variables

// Subtasks

Create two new variables named humanScore and 
computerScore in the global scope.

Initialize those variables with the value of 0.

// Pseudocode

CREATE variable humanScore in global scope with initial value of 0
CREATE variable computerScore in global scope initial value of 0


# Step 5: Write the logic to play a single round

Game will be played round by round

Write a function that takes the 
Human and computer player choices as arguments

Plays a single round,
Increments the round winner’s score and
Logs a winner announcement.

// Subtasks

Create a new function named playRound

Define two parameters 
for playRound: humanChoice and computerChoice. 
Use these two parameters to take 
the human and computer choices as arguments.

Make your function’s humanChoice parameter case-insensitive
so that players can input “rock”, “ROCK”, “RocK”, 
or other variations.

Write the code for your playRound function to console.log 
a string value representing the round winner, 
such as: “You lose! Paper beats Rock”.

Increment the humanScore or computerScore variable 
based on the round winner.

// Pseudocode

CREATE fucntion playRound with 2 parameters (humanChoice, computerChoice)

MAKE function playRound case in-sensitive for humanChoice

MAKE function playRound display a string representing round winner (“You lose! Paper beats Rock”)

ADD humanScore OR computerScore based on round winner


# Step 6: Write the logic to play the entire game

Your game will play 5 rounds

Write a function named playGame that calls playRound to play 5 rounds

Keeps track of the scores and declares a winner at the end.

// Subtasks

Create a new function named playGame

Move your playRound function and score variables so 
that they’re declared inside of the new playGame function

Play 5 rounds by calling playRound 5 times

// Pseudocode

CREATE function playGame

MAKE playRound runs 5 times

SHOW winner at the end through humanScore AND computerScore

